{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzCPQ,KAAOC,SAASC,cAAc,SAC9BC,WAAaF,SAASC,cAAc,uBACpCE,UAAYH,SAASC,cAAc,sBACnCG,YAAcJ,SAASC,cAAc,wBAErCF,KAAKM,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAMC,iBAMJ,IAJF,IAAIC,EAAQC,SAASP,WAAWQ,OAC1BC,EAAOF,SAASN,UAAUO,OAC1BE,EAASH,SAASL,YAAYM,OAEzBG,EAAI,EAAGA,EAAID,EAAQC,IAE1BxB,EAAcwB,EAAE,EAAGL,GAChBM,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGrEiB,GAASG,EAGfL,EAAMgB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// form handling\nform = document.querySelector('.form');\ndelayInput = document.querySelector('input[name=\"delay\"]');\nstepInput = document.querySelector('input[name=\"step\"]');\namountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', submitForm);\n\nfunction submitForm(event) {\n  event.preventDefault();\n\n  let delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n    for (let i = 0; i < amount; i++) {\n// Promise starts from number 1 i+1\n      createPromise(i+1, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n// The delay for each subsequent promise is increased by the value of step.\n        delay += step;\n    }\n// reset the form fields\n  event.currentTarget.reset();\n}\n\n// The function creates a promise using the Promise constructor. Inside the promise executor function, it generates a random value between 0 and 1, greater than 0.3, shouldResolve is set to true, indicating that the promise should resolve. Otherwise, shouldResolve is set to false, indicating that the promise should reject.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n// setTimeout() is commonly used for scenarios where you want to delay a specific action, such as animations, updates, or asynchronous operations.\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","delayInput","stepInput","amountInput","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.4f4c284e.js.map"}