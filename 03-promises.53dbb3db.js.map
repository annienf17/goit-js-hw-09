{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIA,MAAMC,EAAOC,SAASC,cAAc,SA+BpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCbQ,WAAaZ,SAASC,cAAc,uBACpCY,UAAYb,SAASC,cAAc,sBACnCa,YAAcd,SAASC,cAAc,wBAErCF,EAAKgB,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAMC,iBAEN,IAAIC,EAAQC,SAASP,WAAWQ,OAChC,MAAMC,EAAOF,SAASN,UAAUO,OAC1BE,EAASH,SAASL,YAAYM,OAElC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAE1BrB,EAAcqB,EAAE,EAAGL,GAChBM,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoB1B,QAAeC,MAAU,IAGvEc,GAASG,EAGfL,EAAMc,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["\"use strict\";\nimport Notiflix from 'notiflix';\n\n// form handling\nconst form = document.querySelector('.form');\ndelayInput = document.querySelector('input[name=\"delay\"]');\nstepInput = document.querySelector('input[name=\"step\"]');\namountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', submitForm);\n\nfunction submitForm(event) {\n  event.preventDefault();\n\n  let delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n    for (let i = 0; i < amount; i++) {\n// Promise starts from number 1 i+1\n      createPromise(i+1, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n// The delay for each subsequent promise is increased by the value of step.\n        delay += step;\n    }\n// reset the form fields\n  event.currentTarget.reset();\n}\n\n// The function creates a promise using the Promise constructor. Inside the promise executor function, it generates a random value between 0 and 1, greater than 0.3, shouldResolve is set to true, indicating that the promise should resolve. Otherwise, shouldResolve is set to false, indicating that the promise should reject.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n// setTimeout() is commonly used for scenarios where you want to delay a specific action, such as animations, updates, or asynchronous operations.\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delayInput","stepInput","amountInput","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.53dbb3db.js.map"}